EcoMonster Project - High-Level Design & Vision Summary
=======================================================

üéØ PURPOSE & VISION
-------------------
EcoMonster is an ecological simulation and resource management game where players interact with 
dynamic environments to trigger spawning loops and resource transformation chains. The core 
concept revolves around creating and managing interconnected ecosystems where environmental 
conditions directly influence creature spawning, behavior, and resource generation.

This document serves as a shared vision and onboarding aid for collaborators to understand 
the project's current prototype state, design principles, and planned development direction.


üîÑ CURRENT PROTOTYPE LOOPS
--------------------------

Forest Ecosystem Loop:
‚Ä¢ Forest Detection ‚Üí Wisp Spawning ‚Üí [Future: Mana Collection] ‚Üí [Future: Crystal Formation]
‚Ä¢ ForestManager detects tree clusters (8+ trees within 500 units)
‚Ä¢ Spawns up to 3 Wisps per forest every 15 seconds
‚Ä¢ Wisps currently wander and interact with environment

Lake Ecosystem Loop:
‚Ä¢ Lake Detection ‚Üí Silver Ingot Trigger ‚Üí Fog Generation ‚Üí Specter Spawning ‚Üí [Future: Crystal Drops]
‚Ä¢ LakeManager detects water tile clusters
‚Ä¢ Player drops Silver Ingots into lakes to trigger fog effects
‚Ä¢ Foggy lakes spawn up to 5 Specters every 15 seconds
‚Ä¢ Specters emerge from fog and interact with environment

Resource Transformation Chain:
‚Ä¢ Ore ‚Üí Coal (via Coal Worms) ‚Üí Lava (via Fire Elementals) ‚Üí Soil (via Dragons) ‚Üí New Ore
‚Ä¢ Dragons consume lava and excrete ore after cooldown
‚Ä¢ Creates sustainable resource cycling system


üèõÔ∏è KEY ENTITIES & SYSTEMS
--------------------------

Core Managers:
‚Ä¢ ForestManager.gd - Handles forest detection, wisp spawning, and forest lifecycle
‚Ä¢ LakeManager.gd - Manages lake detection, fog effects, and specter spawning
‚Ä¢ EventBus.gd - Central communication system for cross-system events

Creatures:
‚Ä¢ Wisp - Forest-born creatures that emerge from tree clusters
‚Ä¢ Specter - Lake-born creatures that spawn from foggy water bodies
‚Ä¢ Dragon - Apex predator that consumes lava and produces ore
‚Ä¢ Fire Elemental - Converts coal tiles to lava, searches and wanders
‚Ä¢ Coal Worm - Converts ore drops to coal tiles, efficiency tracked

Environmental Elements:
‚Ä¢ Trees - Form forests when clustered, trigger wisp spawning
‚Ä¢ Water Bodies - Become foggy when triggered, spawn specters
‚Ä¢ Fog Effects - Visual and mechanical indication of active lakes

Resource Systems:
‚Ä¢ Inventory Management - Grid-based inventory with drag/drop mechanics
‚Ä¢ Item Drops - Physical items that can be placed in world
‚Ä¢ Ore/Coal/Lava Tiles - Environmental resources with transformation chains


üéÆ PLAYER VERBS (CURRENT & PLANNED)
-----------------------------------
Current:
‚Ä¢ Drop Items - Place silver ingots or other items in world to trigger effects
‚Ä¢ Inventory Management - Organize and move items between slots
‚Ä¢ Environment Observation - Watch creature spawning and behavior patterns

Planned:
‚Ä¢ Crafting - Combine resources to create new items and tools
‚Ä¢ Mana Collection - Gather essence from wisps and other magical creatures
‚Ä¢ Crystal Cultivation - Influence crystal formation through environmental manipulation
‚Ä¢ Ecosystem Balancing - Actively manage spawning rates and resource flows


üèóÔ∏è DESIGN PILLARS
------------------

1. Emergent Ecology
   - Systems interact naturally without heavy scripting
   - Environmental conditions drive creature behavior
   - Player actions have cascading effects through ecosystem

2. Visual Clarity
   - Clear visual feedback for all system states
   - Intuitive UI that doesn't overwhelm the ecological focus
   - Environmental storytelling through creature behavior

3. Sustainable Loops
   - Self-regulating systems that maintain balance
   - Resource scarcity and abundance create natural rhythms
   - Player intervention enhances rather than replaces natural processes

4. Modular Architecture
   - Clean separation between systems for easy expansion
   - Shared modules reduce code duplication
   - Single responsibility principle maintained throughout


üåü DISTINCTIVE HOOKS
--------------------

‚Ä¢ Environmental Triggers - Player actions directly modify ecosystem conditions
‚Ä¢ Creature Lineage - Spawned creatures remember their origin environments
‚Ä¢ Visual Ecology - Fog, forests, and creature movements tell environmental stories
‚Ä¢ Resource Metamorphosis - Materials transform through creature interactions
‚Ä¢ Balanced Automation - Systems run independently but benefit from player guidance


üöß CURRENT GAPS & TECHNICAL DEBT
---------------------------------

Missing Features:
‚Ä¢ Mana Drops - Wisps should drop collectible mana when interacting
‚Ä¢ Fog Decay Timer - Fog effects should naturally dissipate over time
‚Ä¢ Crafting Station - Central hub for combining resources into new items
‚Ä¢ Crystal Formation - End-goal resources for high-level crafting
‚Ä¢ Progression Breadcrumbs - Clear goals and advancement markers

Technical Improvements Needed:
‚Ä¢ Spawn Balancing - Fine-tune creature population limits and spawn rates
‚Ä¢ Performance Optimization - Large-scale ecosystem management efficiency
‚Ä¢ Save/Load System - Persistent world state across sessions
‚Ä¢ Audio Integration - Ambient sounds for different ecosystem states
‚Ä¢ Animation Polish - Smoother creature movement and environmental transitions


üíª TECHNICAL ARCHITECTURE NOTES
-------------------------------

Framework: Godot 4.4 with modular script architecture
Key Patterns:
‚Ä¢ Manager classes handle ecosystem detection and spawning
‚Ä¢ Shared modules (SearchModule, ConversionModule) provide reusable logic
‚Ä¢ EventBus enables loose coupling between systems
‚Ä¢ Rolling statistics track efficiency and performance metrics

File Organization:
‚Ä¢ /systems/ - Core managers and shared modules
‚Ä¢ /creatures/ - Individual creature behaviors and AI
‚Ä¢ /ui/ - Interface components and user interaction
‚Ä¢ /items/ - Resource definitions and behavior
‚Ä¢ /Guides/ - Documentation and development notes

Autoloaded Systems:
‚Ä¢ SearchModule - Pathfinding and target detection
‚Ä¢ ConversionModule - Resource transformation logic
‚Ä¢ InventoryData - Item management and storage
‚Ä¢ EventBus - Cross-system communication


üé® TONE & AESTHETIC TARGETS
---------------------------

Visual Style:
‚Ä¢ Organic, flowing environments with natural color palettes
‚Ä¢ Subtle magical elements that enhance rather than dominate
‚Ä¢ Clear visual hierarchy between interactive and ambient elements

Gameplay Feel:
‚Ä¢ Contemplative pacing with moments of strategic decision-making
‚Ä¢ Satisfying visual feedback for successful ecosystem management
‚Ä¢ Sense of discovery through environmental experimentation

Audio Direction:
‚Ä¢ Ambient natural sounds (water, wind, forest ambiance)
‚Ä¢ Subtle magical audio cues for creature spawning and resource transformation
‚Ä¢ UI sounds that complement rather than compete with environmental audio


üöÄ FUTURE DIRECTION BRAINSTORM
------------------------------

Short-term Expansions (Next 2-3 Updates):
‚Ä¢ Implement mana collection mechanics from wisps
‚Ä¢ Add fog decay timers to create dynamic lake cycles
‚Ä¢ Create basic crafting station for resource combination
‚Ä¢ Add crystal formation as end-goal resource generation

Medium-term Features (6-month Horizon):
‚Ä¢ Multiple biome types (desert, mountain, swamp) with unique creatures
‚Ä¢ Advanced creature AI with territory establishment and migration
‚Ä¢ Player buildings that enhance or modify local ecosystems
‚Ä¢ Seasonal cycles that affect spawning rates and resource availability

Long-term Vision (1+ Year):
‚Ä¢ Multi-layered world with underground/surface/sky ecosystems
‚Ä¢ Player collaboration in shared world environments
‚Ä¢ Advanced genetics system where creature traits evolve over time
‚Ä¢ Dynamic quest generation based on ecosystem health and player actions


üìã SUGGESTED FOLLOW-UP ISSUES
-----------------------------

High Priority:
1. Implement Mana drops from Wisps with collection mechanics
2. Add fog decay timer system for dynamic lake management
3. Create basic crafting station UI and resource combination logic
4. Design crystal formation mechanics for end-game resource goals
5. Balance creature spawn rates and population limits across all ecosystems

Medium Priority:
6. Add progression breadcrumbs and tutorial guidance for new players
7. Implement save/load system for persistent world state
8. Create audio system for ambient ecosystem sounds
9. Optimize performance for large-scale creature population management
10. Add visual polish and animation improvements for creature behaviors

Documentation & Polish:
11. Create player onboarding guide and control documentation
12. Add inline code documentation for all manager classes
13. Establish automated testing framework for ecosystem balance
14. Create art pipeline documentation for new creature and environment assets

========================================
Document Version: 1.0
Last Updated: January 2025
Contributors: Aaron (Lead Designer), Avelaine (Lead Programmer)
Project Phase: Prototype Development