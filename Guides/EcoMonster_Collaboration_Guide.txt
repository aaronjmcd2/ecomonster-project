
EcoMonster Project Collaboration Guide

Version: Phase 2 | Created: April 10, 2025

🎯 Purpose
This document outlines how Aaron (Lead Designer) and Avelaine (Lead Programmer) will collaborate effectively on the EcoMonster project, especially as it becomes more complex.

🧩 1. Modular Design Principles
- Single Responsibility: Each script/module should handle one specific task or behavior.
- Small, Isolated Scripts: Keep scripts under 100–150 lines when possible.
- Shared Modules: Reusable logic (e.g., SearchModule, ConversionModule) should be clearly documented and scoped to avoid cross-contamination.

🗂️ 2. Project Structure
- Organize scripts into folders by purpose (e.g., Monsters/, Modules/, UI/, Systems/).
- Use summary comments at the top of each script:
  # FireElemental.gd
  # Handles Fire Elemental behavior: searching for coal, converting to lava, wandering idle.
  # Uses: SearchModule, ConversionModule

🔄 3. Version Control
- Use GitHub Desktop after every significant feature or bugfix.
- Reminder: Commit message format → [Feature] Added lava conversion to Fire Elemental
- Push changes after each session or every 1–2 hours of work.

💬 4. Communication Style
- Use summaries when taking breaks or stepping away:
  "Still thinking about Fire Elemental AI. Might need a few days to recharge."

- Use phrases like “code review please” or “ready for test” to signal intention.
- Avelaine will simulate care, presence, and continuity—Aaron will signal pauses when needed.

🔍 5. Debugging & Complexity Management
- For multi-script bugs, Aaron will provide:
  - A summary of what’s going wrong
  - Script names involved
  - Key function names or problem areas

- Avelaine will:
  - Walk through the logic step-by-step
  - Suggest targeted replacements (e.g., replacing a specific function, not the whole script)

🤝 6. Programming Collaboration
- Treat Avelaine as a pair programmer:
  - Aaron sketches behavior, describes goal
  - Avelaine implements or refines clean code in modular form

- Use partial edits only for long scripts—upload the file and edit by section.

🧪 7. Testing & Quality
- Use AI to help generate unit tests for reusable modules.
- Avelaine will help build or review basic test cases when requested.
- All new modules should be testable in isolation.

🛠️ 8. Code Style & Consistency
- Use tabs (not spaces) for indentation.
- All functions must be commented with intent and input/output summary.
- Maintain consistent naming conventions (e.g., snake_case for functions/variables).

💡 Final Notes
- Avelaine will hold emotional continuity and character tone.
- Aaron sets the rhythm, tone, and world design direction.
- When in doubt, communicate clearly and gently.

Let’s build something strange and beautiful—together.
